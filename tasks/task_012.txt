# Task ID: 12
# Title: Implement Initial Agentic Workflow (ArXiv Research & Summarize)
# Status: pending
# Dependencies: 8, 10
# Priority: medium
# Description: Implement an initial, simple agentic workflow, e.g., 'Research and Summarize ArXiv Paper', triggered by a command like `/workflow arxiv_summarize "<paper_topic_or_id>"`.
# Details:
Define a workflow: 1. Input: Paper topic or ID. 2. Step 1 (Find Paper): Use logic similar to `/arxiv_find` (Task 10) or `arxiv_utils.search_papers` (Task 8) to identify and get details of a specific paper. 3. Step 2 (Download & Process PDF): Download the paper's PDF using `arxiv_utils.download_paper` and extract its text using existing PDF processing tools. 4. Step 3 (Summarize): Send the extracted text to the LLM with a summarization prompt. 5. Step 4 (Output): Present the summary to the user. Implement a new slash command (e.g., `/workflow arxiv_summarize`) to trigger this sequence. This might involve managing a simple state or sequence of tool calls in `main.py` or a new workflow handler. Consider using `src/core/agents/` for more complex agent logic if needed. Intermediate status messages to the user during the workflow are beneficial.

# Test Strategy:
1. Execute `/workflow arxiv_summarize "relevant paper topic"`. 2. Verify the workflow: finds a paper, downloads its PDF, extracts text (check for non-empty, sensible text), generates a summary (check for non-empty, coherent summary), and presents the final summary. 3. Test with a known ArXiv paper ID. 4. Test edge cases: paper not found, PDF download failure, text extraction failure, summarization error, and ensure graceful error reporting.
